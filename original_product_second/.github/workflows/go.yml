name: Go Backend CI/CD  # ワークフローの名前を定義

on:  # どのイベントでワークフローを実行するかを定義
  push:  # pushイベント時に実行
    branches: [ main ]  # mainブランチへのpushの場合に実行
    paths:  # 特定のパスが変更された場合のみ実行
      - 'backend/**'  # バックエンドディレクトリ
  pull_request:  # プルリクエスト時に実行
    branches: [ main ]  # mainブランチへのプルリクエストの場合に実行
    paths:  # 特定のパスが変更された場合のみ実行
      - 'backend/**'  # バックエンドディレクトリ
  schedule:  # スケジュールで実行
    - cron: '0 0 * * 0'  # 毎週日曜日の午前0時に実行
  workflow_dispatch:  # 手動実行を可能にする

jobs:  # ワークフローのジョブを定義
  lint:  # リントジョブ
    name: Lint  # ジョブの表示名
    runs-on: ubuntu-latest  # 実行環境としてUbuntu最新版を使用
    
    steps:  # ジョブのステップを定義
    - name: Checkout code  # コードをチェックアウト
      uses: actions/checkout@v3  # GitHubが提供する公式アクション
      # checkout: リポジトリのコードを取得する
      # v3: バージョン3を使用
    
    - name: Set up Go  # Go環境をセットアップ
      uses: actions/setup-go@v4  # Go環境をセットアップするアクション
      # setup-go: Go言語の環境を構築するアクション
      # v4: バージョン4を使用
      with:  # アクションのパラメータを指定
        go-version: '^1.20'  # Go 1.20以上を使用
        cache: true  # ビルドキャッシュを有効化
    
    - name: Verify dependencies  # 依存関係を検証
      run: go mod verify  # モジュールの整合性を検証
      # go mod verify: Go依存モジュールの整合性を検証するコマンド
      working-directory: ./backend  # 作業ディレクトリ
    
    - name: Install golangci-lint  # golangci-lintをインストール
      uses: golangci/golangci-lint-action@v3  # lintツールアクション
      # golangci-lint-action: Go言語用の高度なlintツール
      # v3: バージョン3を使用
      with:  # アクションのパラメータを指定
        version: latest  # 最新版を使用
        args: --timeout=5m  # タイムアウト設定
        working-directory: ./backend  # 作業ディレクトリ
  
  test:  # テストジョブ
    name: Test  # ジョブの表示名
    runs-on: ubuntu-latest  # 実行環境としてUbuntu最新版を使用
    needs: lint  # lintジョブが成功した後に実行
    
    steps:  # ジョブのステップを定義
    - name: Checkout code  # コードをチェックアウト
      uses: actions/checkout@v3  # GitHubが提供する公式アクション
    
    - name: Set up Go  # Go環境をセットアップ
      uses: actions/setup-go@v4  # Go環境をセットアップするアクション
      with:  # アクションのパラメータを指定
        go-version: '^1.20'  # Go 1.20以上を使用
        cache: true  # ビルドキャッシュを有効化
    
    - name: Install dependencies  # 依存関係をインストール
      run: go mod download  # 依存モジュールをダウンロード
      # go mod download: Goの依存モジュールをダウンロードするコマンド
      working-directory: ./backend  # 作業ディレクトリ
    
    - name: Run tests with coverage  # カバレッジ付きでテストを実行
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...  # テスト実行
      # go test: Goのテストを実行するコマンド
      # -race: 競合状態の検出を有効化
      # -coverprofile: カバレッジファイルの出力先を指定
      # -covermode=atomic: 正確なカバレッジを計測
      # ./...: すべてのパッケージをテスト
      working-directory: ./backend  # 作業ディレクトリ
    
    - name: Upload coverage to Codecov  # Codecovにカバレッジをアップロード
      uses: codecov/codecov-action@v3  # Codecovアクション
      # codecov-action: コードカバレッジをCodecovサービスにアップロードする
      # v3: バージョン3を使用
      with:  # アクションのパラメータを指定
        file: ./backend/coverage.txt  # カバレッジファイル
        fail_ci_if_error: true  # エラー時にCIを失敗させる
    
    - name: Run security scan  # セキュリティスキャンを実行
      uses: securego/gosec@master  # gosecアクション
      # gosec: Goコードのセキュリティ問題を検出するツール
      # master: 最新バージョンを使用
      with:  # アクションのパラメータを指定
        args: ./...  # すべてのパッケージをスキャン
        working-directory: ./backend  # 作業ディレクトリ
  
  build:  # ビルドジョブ
    name: Build  # ジョブの表示名
    runs-on: ubuntu-latest  # 実行環境としてUbuntu最新版を使用
    needs: test  # testジョブが成功した後に実行
    
    steps:  # ジョブのステップを定義
    - name: Checkout code  # コードをチェックアウト
      uses: actions/checkout@v3  # GitHubが提供する公式アクション
    
    - name: Set up Go  # Go環境をセットアップ
      uses: actions/setup-go@v4  # Go環境をセットアップするアクション
      with:  # アクションのパラメータを指定
        go-version: '^1.20'  # Go 1.20以上を使用
        cache: true  # ビルドキャッシュを有効化
    
    - name: Install dependencies  # 依存関係をインストール
      run: go mod download  # 依存モジュールをダウンロード
      working-directory: ./backend  # 作業ディレクトリ
    
    - name: Build application  # アプリケーションをビルド
      run: |  # 実行するコマンドを定義
        # CGO_ENABLED=0: Cコンパイラを使用しないビルドを指定
        # GOOS=linux: Linux向けにビルド
        # GOARCH=amd64: 64ビットアーキテクチャ向けにビルド
        # -ldflags: リンク時の設定
        # -s -w: バイナリサイズを縮小
        # -o: 出力先を指定
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o app ./cmd/api
      working-directory: ./backend  # 作業ディレクトリ
    
    - name: Upload build artifact  # ビルド成果物をアップロード
      uses: actions/upload-artifact@v3  # 成果物アップロードアクション
      # upload-artifact: ビルド成果物をGitHub Actionsに保存する
      # v3: バージョン3を使用
      with:  # アクションのパラメータを指定
        name: app  # 成果物の名前
        path: ./backend/app  # 成果物のパス
        retention-days: 7  # 保持日数
  
  docker:  # Dockerジョブ
    name: Build & Push Docker image  # ジョブの表示名
    runs-on: ubuntu-latest  # 実行環境としてUbuntu最新版を使用
    needs: build  # buildジョブが成功した後に実行
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # mainブランチへのpushの場合のみ実行
    
    steps:  # ジョブのステップを定義
    - name: Checkout code  # コードをチェックアウト
      uses: actions/checkout@v3  # GitHubが提供する公式アクション
    
    - name: Set up Docker Buildx  # Docker Buildxをセットアップ
      uses: docker/setup-buildx-action@v2  # Docker Buildxアクション
      # setup-buildx-action: 高度なDockerビルド機能を有効化
      # v2: バージョン2を使用
    
    - name: Login to DockerHub  # DockerHubにログイン
      uses: docker/login-action@v2  # Dockerログインアクション
      # login-action: Dockerレジストリにログインする
      # v2: バージョン2を使用
      with:  # アクションのパラメータを指定
        username: ${{ secrets.DOCKERHUB_USERNAME }}  # DockerHubユーザー名
        password: ${{ secrets.DOCKERHUB_TOKEN }}  # DockerHubトークン
    
    - name: Download build artifact  # ビルド成果物をダウンロード
      uses: actions/download-artifact@v3  # 成果物ダウンロードアクション
      # download-artifact: GitHub Actionsに保存された成果物をダウンロード
      # v3: バージョン3を使用
      with:  # アクションのパラメータを指定
        name: app  # 成果物の名前
        path: ./backend  # ダウンロード先
    
    - name: Build and push  # ビルドとプッシュ
      uses: docker/build-push-action@v4  # Dockerビルドプッシュアクション
      # build-push-action: Dockerイメージをビルドしてレジストリにプッシュ
      # v4: バージョン4を使用
      with:  # アクションのパラメータを指定
        context: ./backend  # ビルドコンテキスト
        file: ./backend/Dockerfile  # Dockerfileのパス
        push: true  # イメージをプッシュする
        tags: |  # イメージタグ
          user/app:latest
          user/app:${{ github.sha }}
        cache-from: type=registry,ref=user/app:latest  # キャッシュ元
        cache-to: type=inline  # キャッシュ先
        platforms: linux/amd64,linux/arm64  # ビルド対象プラットフォーム
        build-args: |  # ビルド引数
          APP_VERSION=${{ github.sha }}
    
    - name: Run Trivy vulnerability scanner  # Trivyでの脆弱性スキャン
      uses: aquasecurity/trivy-action@master  # Trivyアクション
      # trivy-action: コンテナイメージの脆弱性をスキャン
      # master: 最新バージョンを使用
      with:  # アクションのパラメータを指定
        image-ref: user/app:${{ github.sha }}  # スキャン対象イメージ
        format: 'sarif'  # 出力フォーマット
        output: 'trivy-results.sarif'  # 出力先
        severity: 'CRITICAL,HIGH'  # スキャン対象の重大度
    
    - name: Upload Trivy scan results to GitHub Security tab  # Trivyの結果をGitHubにアップロード
      uses: github/codeql-action/upload-sarif@v2  # GitHubのSARIFアップロードアクション
      # codeql-action/upload-sarif: セキュリティスキャン結果をGitHubにアップロード
      # v2: バージョン2を使用
      if: always()  # 常に実行
      with:  # アクションのパラメータを指定
        sarif_file: 'trivy-results.sarif'  # SARIFファイル
  
  deploy:  # デプロイジョブ
    name: Deploy to Production  # ジョブの表示名
    runs-on: ubuntu-latest  # 実行環境としてUbuntu最新版を使用
    needs: docker  # dockerジョブが成功した後に実行
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # mainブランチへのpushの場合のみ実行
    environment: production  # 環境を指定
    
    steps:  # ジョブのステップを定義
    - name: Checkout code  # コードをチェックアウト
      uses: actions/checkout@v3  # GitHubが提供する公式アクション
    
    - name: Install SSH key  # SSH鍵をインストール
      uses: shimataro/ssh-key-action@v2  # SSH鍵アクション
      # ssh-key-action: SSHキーを設定する
      # v2: バージョン2を使用
      with:  # アクションのパラメータを指定
        key: ${{ secrets.SSH_PRIVATE_KEY }}  # SSH秘密鍵
        known_hosts: ${{ secrets.KNOWN_HOSTS }}  # 既知のホスト情報
    
    - name: Deploy to server  # サーバーにデプロイ
      run: |  # 実行するコマンドを定義
        ssh deploy@${{ secrets.DEPLOY_HOST }} "docker pull user/app:${{ github.sha }} && \
        docker stop app || true && \
        docker rm app || true && \
        docker run -d --name app \
          -p 8080:8080 \
          --restart=always \
          --network=production \
          -e DB_HOST=${{ secrets.DB_HOST }} \
          -e DB_USER=${{ secrets.DB_USER }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          -e DB_NAME=${{ secrets.DB_NAME }} \
          -e JWT_SECRET=${{ secrets.JWT_SECRET }} \
          -e ENVIRONMENT=production \
          user/app:${{ github.sha }}" 